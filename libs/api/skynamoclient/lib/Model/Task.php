<?php
/**
 * Task
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  SkynamoClientAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Skynamo Public API
 *
 * The specification for Skynamo's public API <br><br>Helpful links<br> <a href=\"https://support.skynamo.com/hc/en-us/articles/6671335262749-Creating-a-Public-API-Key\" id=\"hint_box\">Creating a Public API Key</a><br> <a href=\"https://support.skynamo.com/hc/en-us/articles/6671463933597-Postman-Examples\" id=\"hint_box\">Postman examples</a><br> <a href=\"https://support.skynamo.com/hc/en-us/articles/6671240071453-How-to-upload-customer-images-using-Postman\" id=\"hint_box\">How to upload customer images</a>
 *
 * The version of the OpenAPI document: 1.0.18
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkynamoClientAPI\Model;

use \ArrayAccess;
use \SkynamoClientAPI\ObjectSerializer;

/**
 * Task Class Doc Comment
 *
 * @category Class
 * @description This is a task in Skynamo, used for fetching information about tasks
 * @package  SkynamoClientAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Task implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'description' => 'string',
        'create_date' => '\DateTime',
        'due_date' => '\DateTime',
        'customer_id' => 'int',
        'customer_code' => 'string',
        'customer_name' => 'string',
        'row_version' => 'float',
        'last_modified_time' => '\DateTime',
        'reminder_offset' => 'string',
        'completed_date' => '\DateTime',
        'assigned_user_id' => 'int',
        'assigned_user_name' => 'string',
        'creator_user_id' => 'int',
        'creator_user_name' => 'string',
        'anytime' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'description' => null,
        'create_date' => 'date-time',
        'due_date' => 'date-time',
        'customer_id' => null,
        'customer_code' => null,
        'customer_name' => null,
        'row_version' => 'long',
        'last_modified_time' => 'date-time',
        'reminder_offset' => null,
        'completed_date' => 'date-time',
        'assigned_user_id' => null,
        'assigned_user_name' => null,
        'creator_user_id' => null,
        'creator_user_name' => null,
        'anytime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'create_date' => 'create_date',
        'due_date' => 'due_date',
        'customer_id' => 'customer_id',
        'customer_code' => 'customer_code',
        'customer_name' => 'customer_name',
        'row_version' => 'row_version',
        'last_modified_time' => 'last_modified_time',
        'reminder_offset' => 'reminder_offset',
        'completed_date' => 'completed_date',
        'assigned_user_id' => 'assigned_user_id',
        'assigned_user_name' => 'assigned_user_name',
        'creator_user_id' => 'creator_user_id',
        'creator_user_name' => 'creator_user_name',
        'anytime' => 'anytime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'create_date' => 'setCreateDate',
        'due_date' => 'setDueDate',
        'customer_id' => 'setCustomerId',
        'customer_code' => 'setCustomerCode',
        'customer_name' => 'setCustomerName',
        'row_version' => 'setRowVersion',
        'last_modified_time' => 'setLastModifiedTime',
        'reminder_offset' => 'setReminderOffset',
        'completed_date' => 'setCompletedDate',
        'assigned_user_id' => 'setAssignedUserId',
        'assigned_user_name' => 'setAssignedUserName',
        'creator_user_id' => 'setCreatorUserId',
        'creator_user_name' => 'setCreatorUserName',
        'anytime' => 'setAnytime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'create_date' => 'getCreateDate',
        'due_date' => 'getDueDate',
        'customer_id' => 'getCustomerId',
        'customer_code' => 'getCustomerCode',
        'customer_name' => 'getCustomerName',
        'row_version' => 'getRowVersion',
        'last_modified_time' => 'getLastModifiedTime',
        'reminder_offset' => 'getReminderOffset',
        'completed_date' => 'getCompletedDate',
        'assigned_user_id' => 'getAssignedUserId',
        'assigned_user_name' => 'getAssignedUserName',
        'creator_user_id' => 'getCreatorUserId',
        'creator_user_name' => 'getCreatorUserName',
        'anytime' => 'getAnytime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['create_date'] = $data['create_date'] ?? null;
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['customer_code'] = $data['customer_code'] ?? null;
        $this->container['customer_name'] = $data['customer_name'] ?? null;
        $this->container['row_version'] = $data['row_version'] ?? null;
        $this->container['last_modified_time'] = $data['last_modified_time'] ?? null;
        $this->container['reminder_offset'] = $data['reminder_offset'] ?? null;
        $this->container['completed_date'] = $data['completed_date'] ?? null;
        $this->container['assigned_user_id'] = $data['assigned_user_id'] ?? null;
        $this->container['assigned_user_name'] = $data['assigned_user_name'] ?? null;
        $this->container['creator_user_id'] = $data['creator_user_id'] ?? null;
        $this->container['creator_user_name'] = $data['creator_user_name'] ?? null;
        $this->container['anytime'] = $data['anytime'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier of the task
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of what the task entails
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date The date when the task was created
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date The date when the task is due (the time should be ignored if anytime is set to true)
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int|null $customer_id The unique identifier of the customer where the task should be completed (if applicable)
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string|null
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string|null $customer_code The unique code of the customer where the task should be completed (if applicable)
     *
     * @return self
     */
    public function setCustomerCode($customer_code)
    {
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name The name of the customer where the task should be completed (if applicable)
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets row_version
     *
     * @return float|null
     */
    public function getRowVersion()
    {
        return $this->container['row_version'];
    }

    /**
     * Sets row_version
     *
     * @param float|null $row_version An automatically generated, unique number used to version-stamp table rows in the database
     *
     * @return self
     */
    public function setRowVersion($row_version)
    {
        $this->container['row_version'] = $row_version;

        return $this;
    }

    /**
     * Gets last_modified_time
     *
     * @return \DateTime|null
     */
    public function getLastModifiedTime()
    {
        return $this->container['last_modified_time'];
    }

    /**
     * Sets last_modified_time
     *
     * @param \DateTime|null $last_modified_time The last time the task was modified
     *
     * @return self
     */
    public function setLastModifiedTime($last_modified_time)
    {
        $this->container['last_modified_time'] = $last_modified_time;

        return $this;
    }

    /**
     * Gets reminder_offset
     *
     * @return string|null
     */
    public function getReminderOffset()
    {
        return $this->container['reminder_offset'];
    }

    /**
     * Sets reminder_offset
     *
     * @param string|null $reminder_offset A timespan indicating when the reminder for this task will be sent out (it is the duration between the reminder and the due date)
     *
     * @return self
     */
    public function setReminderOffset($reminder_offset)
    {
        $this->container['reminder_offset'] = $reminder_offset;

        return $this;
    }

    /**
     * Gets completed_date
     *
     * @return \DateTime|null
     */
    public function getCompletedDate()
    {
        return $this->container['completed_date'];
    }

    /**
     * Sets completed_date
     *
     * @param \DateTime|null $completed_date The date the task was completed (the task is not completed if this field is empty)
     *
     * @return self
     */
    public function setCompletedDate($completed_date)
    {
        $this->container['completed_date'] = $completed_date;

        return $this;
    }

    /**
     * Gets assigned_user_id
     *
     * @return int|null
     */
    public function getAssignedUserId()
    {
        return $this->container['assigned_user_id'];
    }

    /**
     * Sets assigned_user_id
     *
     * @param int|null $assigned_user_id The unique identifier of the user that must complete this task
     *
     * @return self
     */
    public function setAssignedUserId($assigned_user_id)
    {
        $this->container['assigned_user_id'] = $assigned_user_id;

        return $this;
    }

    /**
     * Gets assigned_user_name
     *
     * @return string|null
     */
    public function getAssignedUserName()
    {
        return $this->container['assigned_user_name'];
    }

    /**
     * Sets assigned_user_name
     *
     * @param string|null $assigned_user_name The user name of the the user that must complete this task
     *
     * @return self
     */
    public function setAssignedUserName($assigned_user_name)
    {
        $this->container['assigned_user_name'] = $assigned_user_name;

        return $this;
    }

    /**
     * Gets creator_user_id
     *
     * @return int|null
     */
    public function getCreatorUserId()
    {
        return $this->container['creator_user_id'];
    }

    /**
     * Sets creator_user_id
     *
     * @param int|null $creator_user_id The unique identifier of the user that created this task
     *
     * @return self
     */
    public function setCreatorUserId($creator_user_id)
    {
        $this->container['creator_user_id'] = $creator_user_id;

        return $this;
    }

    /**
     * Gets creator_user_name
     *
     * @return string|null
     */
    public function getCreatorUserName()
    {
        return $this->container['creator_user_name'];
    }

    /**
     * Sets creator_user_name
     *
     * @param string|null $creator_user_name The user name of the user that created this task
     *
     * @return self
     */
    public function setCreatorUserName($creator_user_name)
    {
        $this->container['creator_user_name'] = $creator_user_name;

        return $this;
    }

    /**
     * Gets anytime
     *
     * @return bool|null
     */
    public function getAnytime()
    {
        return $this->container['anytime'];
    }

    /**
     * Sets anytime
     *
     * @param bool|null $anytime True if the task can be completed at any time on the due_date (ignore the time segment of due_date if true)
     *
     * @return self
     */
    public function setAnytime($anytime)
    {
        $this->container['anytime'] = $anytime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


