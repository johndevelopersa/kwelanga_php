<?php
/**
 * Interaction
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  SkynamoClientAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Skynamo Public API
 *
 * The specification for Skynamo's public API <br><br>Helpful links<br> <a href=\"https://support.skynamo.com/hc/en-us/articles/6671335262749-Creating-a-Public-API-Key\" id=\"hint_box\">Creating a Public API Key</a><br> <a href=\"https://support.skynamo.com/hc/en-us/articles/6671463933597-Postman-Examples\" id=\"hint_box\">Postman examples</a><br> <a href=\"https://support.skynamo.com/hc/en-us/articles/6671240071453-How-to-upload-customer-images-using-Postman\" id=\"hint_box\">How to upload customer images</a>
 *
 * The version of the OpenAPI document: 1.0.18
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkynamoClientAPI\Model;

use \ArrayAccess;
use \SkynamoClientAPI\ObjectSerializer;

/**
 * Interaction Class Doc Comment
 *
 * @category Class
 * @description This is an interaction in Skynamo, used for fetching information about interactions
 * @package  SkynamoClientAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Interaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Interaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'customer_id' => 'int',
        'customer_code' => 'string',
        'customer_name' => 'string',
        'comment' => 'string',
        'date' => '\DateTime',
        'end_time' => '\DateTime',
        'is_visit' => 'bool',
        'location' => '\SkynamoClientAPI\Model\Location',
        'last_modified_time' => '\DateTime',
        'user_id' => 'int',
        'user_name' => 'string',
        'credit_request_id' => 'int',
        'order_id' => 'int',
        'quote_id' => 'int',
        'product_numbers_survey_id' => 'int',
        'completed_form_ids' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'customer_id' => null,
        'customer_code' => null,
        'customer_name' => null,
        'comment' => null,
        'date' => 'date-time',
        'end_time' => 'date-time',
        'is_visit' => null,
        'location' => null,
        'last_modified_time' => 'date-time',
        'user_id' => null,
        'user_name' => null,
        'credit_request_id' => null,
        'order_id' => null,
        'quote_id' => null,
        'product_numbers_survey_id' => null,
        'completed_form_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'customer_id' => 'customer_id',
        'customer_code' => 'customer_code',
        'customer_name' => 'customer_name',
        'comment' => 'comment',
        'date' => 'date',
        'end_time' => 'end_time',
        'is_visit' => 'is_visit',
        'location' => 'location',
        'last_modified_time' => 'last_modified_time',
        'user_id' => 'user_id',
        'user_name' => 'user_name',
        'credit_request_id' => 'credit_request_id',
        'order_id' => 'order_id',
        'quote_id' => 'quote_id',
        'product_numbers_survey_id' => 'product_numbers_survey_id',
        'completed_form_ids' => 'completed_form_ids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'customer_id' => 'setCustomerId',
        'customer_code' => 'setCustomerCode',
        'customer_name' => 'setCustomerName',
        'comment' => 'setComment',
        'date' => 'setDate',
        'end_time' => 'setEndTime',
        'is_visit' => 'setIsVisit',
        'location' => 'setLocation',
        'last_modified_time' => 'setLastModifiedTime',
        'user_id' => 'setUserId',
        'user_name' => 'setUserName',
        'credit_request_id' => 'setCreditRequestId',
        'order_id' => 'setOrderId',
        'quote_id' => 'setQuoteId',
        'product_numbers_survey_id' => 'setProductNumbersSurveyId',
        'completed_form_ids' => 'setCompletedFormIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'customer_id' => 'getCustomerId',
        'customer_code' => 'getCustomerCode',
        'customer_name' => 'getCustomerName',
        'comment' => 'getComment',
        'date' => 'getDate',
        'end_time' => 'getEndTime',
        'is_visit' => 'getIsVisit',
        'location' => 'getLocation',
        'last_modified_time' => 'getLastModifiedTime',
        'user_id' => 'getUserId',
        'user_name' => 'getUserName',
        'credit_request_id' => 'getCreditRequestId',
        'order_id' => 'getOrderId',
        'quote_id' => 'getQuoteId',
        'product_numbers_survey_id' => 'getProductNumbersSurveyId',
        'completed_form_ids' => 'getCompletedFormIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['customer_code'] = $data['customer_code'] ?? null;
        $this->container['customer_name'] = $data['customer_name'] ?? null;
        $this->container['comment'] = $data['comment'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['end_time'] = $data['end_time'] ?? null;
        $this->container['is_visit'] = $data['is_visit'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['last_modified_time'] = $data['last_modified_time'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['user_name'] = $data['user_name'] ?? null;
        $this->container['credit_request_id'] = $data['credit_request_id'] ?? null;
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['quote_id'] = $data['quote_id'] ?? null;
        $this->container['product_numbers_survey_id'] = $data['product_numbers_survey_id'] ?? null;
        $this->container['completed_form_ids'] = $data['completed_form_ids'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique ID of the interaction
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int|null $customer_id The unique ID of the customer associated with the interaction
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string|null
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string|null $customer_code The unique code of the customer associated with the interaction
     *
     * @return self
     */
    public function setCustomerCode($customer_code)
    {
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name The name of the customer associated with the interaction
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment A comment about the interaction (if applicable)
     *
     * @return self
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The date and time when the interaction occurred
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time The date and time when the interaction ended (if applicable)
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets is_visit
     *
     * @return bool|null
     */
    public function getIsVisit()
    {
        return $this->container['is_visit'];
    }

    /**
     * Sets is_visit
     *
     * @param bool|null $is_visit True if the interaction is a visit
     *
     * @return self
     */
    public function setIsVisit($is_visit)
    {
        $this->container['is_visit'] = $is_visit;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \SkynamoClientAPI\Model\Location|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \SkynamoClientAPI\Model\Location|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets last_modified_time
     *
     * @return \DateTime|null
     */
    public function getLastModifiedTime()
    {
        return $this->container['last_modified_time'];
    }

    /**
     * Sets last_modified_time
     *
     * @param \DateTime|null $last_modified_time The last time the interaction was modified
     *
     * @return self
     */
    public function setLastModifiedTime($last_modified_time)
    {
        $this->container['last_modified_time'] = $last_modified_time;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The unique ID of the user that did the interaction
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name The user name of the user that did the interaction
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets credit_request_id
     *
     * @return int|null
     */
    public function getCreditRequestId()
    {
        return $this->container['credit_request_id'];
    }

    /**
     * Sets credit_request_id
     *
     * @param int|null $credit_request_id The unique ID of the credit request that was placed at the interaction (if applicable)
     *
     * @return self
     */
    public function setCreditRequestId($credit_request_id)
    {
        $this->container['credit_request_id'] = $credit_request_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id The unique ID of the order that was placed at the interaction (if applicable)
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets quote_id
     *
     * @return int|null
     */
    public function getQuoteId()
    {
        return $this->container['quote_id'];
    }

    /**
     * Sets quote_id
     *
     * @param int|null $quote_id The unique ID of the quote that was placed at the interaction (if applicable)
     *
     * @return self
     */
    public function setQuoteId($quote_id)
    {
        $this->container['quote_id'] = $quote_id;

        return $this;
    }

    /**
     * Gets product_numbers_survey_id
     *
     * @return int|null
     */
    public function getProductNumbersSurveyId()
    {
        return $this->container['product_numbers_survey_id'];
    }

    /**
     * Sets product_numbers_survey_id
     *
     * @param int|null $product_numbers_survey_id The unique ID of the product numbers survey that was placed at the interaction (if applicable)
     *
     * @return self
     */
    public function setProductNumbersSurveyId($product_numbers_survey_id)
    {
        $this->container['product_numbers_survey_id'] = $product_numbers_survey_id;

        return $this;
    }

    /**
     * Gets completed_form_ids
     *
     * @return int[]|null
     */
    public function getCompletedFormIds()
    {
        return $this->container['completed_form_ids'];
    }

    /**
     * Sets completed_form_ids
     *
     * @param int[]|null $completed_form_ids A list of the unique IDs of the completed forms that were placed at the interaction (if applicable)
     *
     * @return self
     */
    public function setCompletedFormIds($completed_form_ids)
    {
        $this->container['completed_form_ids'] = $completed_form_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


