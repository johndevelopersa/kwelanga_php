<?php
/**
 * DealGroupItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  SkynamoClientAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Skynamo Public API
 *
 * The specification for Skynamo's public API <br><br>Helpful links<br> <a href=\"https://support.skynamo.com/hc/en-us/articles/6671335262749-Creating-a-Public-API-Key\" id=\"hint_box\">Creating a Public API Key</a><br> <a href=\"https://support.skynamo.com/hc/en-us/articles/6671463933597-Postman-Examples\" id=\"hint_box\">Postman examples</a><br> <a href=\"https://support.skynamo.com/hc/en-us/articles/6671240071453-How-to-upload-customer-images-using-Postman\" id=\"hint_box\">How to upload customer images</a>
 *
 * The version of the OpenAPI document: 1.0.18
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SkynamoClientAPI\Model;

use \ArrayAccess;
use \SkynamoClientAPI\ObjectSerializer;

/**
 * DealGroupItem Class Doc Comment
 *
 * @category Class
 * @description This is a deal in Skynamo, used for fetching information about deals
 * @package  SkynamoClientAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DealGroupItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DealGroupItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'product_id' => 'int',
        'product_code' => 'string',
        'order_unit_id' => 'int',
        'order_unit_name' => 'string',
        'effective_date' => '\DateTime',
        'expiry_date' => '\DateTime',
        'buy_free_quantity' => 'float',
        'buy_free_units' => 'float',
        'price_bracket_quantity' => 'float',
        'price_bracket_price' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'product_id' => null,
        'product_code' => null,
        'order_unit_id' => null,
        'order_unit_name' => null,
        'effective_date' => 'date-time',
        'expiry_date' => 'date-time',
        'buy_free_quantity' => 'float',
        'buy_free_units' => 'float',
        'price_bracket_quantity' => 'float',
        'price_bracket_price' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product_id' => 'product_id',
        'product_code' => 'product_code',
        'order_unit_id' => 'order_unit_id',
        'order_unit_name' => 'order_unit_name',
        'effective_date' => 'effective_date',
        'expiry_date' => 'expiry_date',
        'buy_free_quantity' => 'buy_free_quantity',
        'buy_free_units' => 'buy_free_units',
        'price_bracket_quantity' => 'price_bracket_quantity',
        'price_bracket_price' => 'price_bracket_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product_id' => 'setProductId',
        'product_code' => 'setProductCode',
        'order_unit_id' => 'setOrderUnitId',
        'order_unit_name' => 'setOrderUnitName',
        'effective_date' => 'setEffectiveDate',
        'expiry_date' => 'setExpiryDate',
        'buy_free_quantity' => 'setBuyFreeQuantity',
        'buy_free_units' => 'setBuyFreeUnits',
        'price_bracket_quantity' => 'setPriceBracketQuantity',
        'price_bracket_price' => 'setPriceBracketPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product_id' => 'getProductId',
        'product_code' => 'getProductCode',
        'order_unit_id' => 'getOrderUnitId',
        'order_unit_name' => 'getOrderUnitName',
        'effective_date' => 'getEffectiveDate',
        'expiry_date' => 'getExpiryDate',
        'buy_free_quantity' => 'getBuyFreeQuantity',
        'buy_free_units' => 'getBuyFreeUnits',
        'price_bracket_quantity' => 'getPriceBracketQuantity',
        'price_bracket_price' => 'getPriceBracketPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['product_id'] = $data['product_id'] ?? null;
        $this->container['product_code'] = $data['product_code'] ?? null;
        $this->container['order_unit_id'] = $data['order_unit_id'] ?? null;
        $this->container['order_unit_name'] = $data['order_unit_name'] ?? null;
        $this->container['effective_date'] = $data['effective_date'] ?? null;
        $this->container['expiry_date'] = $data['expiry_date'] ?? null;
        $this->container['buy_free_quantity'] = $data['buy_free_quantity'] ?? null;
        $this->container['buy_free_units'] = $data['buy_free_units'] ?? null;
        $this->container['price_bracket_quantity'] = $data['price_bracket_quantity'] ?? null;
        $this->container['price_bracket_price'] = $data['price_bracket_price'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique id of the deal
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int|null $product_id The product id associated with this deal
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code The product code associated with this deal
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets order_unit_id
     *
     * @return int|null
     */
    public function getOrderUnitId()
    {
        return $this->container['order_unit_id'];
    }

    /**
     * Sets order_unit_id
     *
     * @param int|null $order_unit_id The order unit id associated with this deal
     *
     * @return self
     */
    public function setOrderUnitId($order_unit_id)
    {
        $this->container['order_unit_id'] = $order_unit_id;

        return $this;
    }

    /**
     * Gets order_unit_name
     *
     * @return string|null
     */
    public function getOrderUnitName()
    {
        return $this->container['order_unit_name'];
    }

    /**
     * Sets order_unit_name
     *
     * @param string|null $order_unit_name The order unit name associated with this deal
     *
     * @return self
     */
    public function setOrderUnitName($order_unit_name)
    {
        $this->container['order_unit_name'] = $order_unit_name;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime|null $effective_date The time at which this deal takes effect
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime|null $expiry_date The time at which this deal expires
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets buy_free_quantity
     *
     * @return float|null
     */
    public function getBuyFreeQuantity()
    {
        return $this->container['buy_free_quantity'];
    }

    /**
     * Sets buy_free_quantity
     *
     * @param float|null $buy_free_quantity The quantity needed for this buy-free deal to take effect
     *
     * @return self
     */
    public function setBuyFreeQuantity($buy_free_quantity)
    {
        $this->container['buy_free_quantity'] = $buy_free_quantity;

        return $this;
    }

    /**
     * Gets buy_free_units
     *
     * @return float|null
     */
    public function getBuyFreeUnits()
    {
        return $this->container['buy_free_units'];
    }

    /**
     * Sets buy_free_units
     *
     * @param float|null $buy_free_units The free units associated with this buy-free deal
     *
     * @return self
     */
    public function setBuyFreeUnits($buy_free_units)
    {
        $this->container['buy_free_units'] = $buy_free_units;

        return $this;
    }

    /**
     * Gets price_bracket_quantity
     *
     * @return float|null
     */
    public function getPriceBracketQuantity()
    {
        return $this->container['price_bracket_quantity'];
    }

    /**
     * Sets price_bracket_quantity
     *
     * @param float|null $price_bracket_quantity The quantity needed for this price bracket deal to take effect
     *
     * @return self
     */
    public function setPriceBracketQuantity($price_bracket_quantity)
    {
        $this->container['price_bracket_quantity'] = $price_bracket_quantity;

        return $this;
    }

    /**
     * Gets price_bracket_price
     *
     * @return float|null
     */
    public function getPriceBracketPrice()
    {
        return $this->container['price_bracket_price'];
    }

    /**
     * Sets price_bracket_price
     *
     * @param float|null $price_bracket_price The price associated with this price bracket deal
     *
     * @return self
     */
    public function setPriceBracketPrice($price_bracket_price)
    {
        $this->container['price_bracket_price'] = $price_bracket_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


